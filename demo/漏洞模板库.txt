host头注入 为了方便获取网站域名，开发人员一般使用请求包中的Host首部字段。例如，在php里用_SERVER[“HTTP_HOST”]。但是这个Host字段值是不可信赖的(可通过HTTP代理工具篡改)，如果应用程序没有对Host字段值进行处理，就有可能造成恶意代码的传入。 攻击者可通过修改host值，注入host，从而达到控制服务器的目的。 1.唯一可信的只有SERVER_NAME,这个在Apache和Nginx里可以通过设置一个虚拟机来记录所有的非法hostheader。\n2.在网站安装和初始化的时候，要求管理员提供一个可信任的域名白名单。如果这个实现起来比较困难，那至少也要保证使用使用getServerName()代替getHeader(“Host”)。
加密算法可猜解 用户登录过程中使用可猜解的加密算法传输用户登录信息，若用户遭受中间人攻击时，攻击者可通过破解获取该用户登录账户，从而进行进一步渗透。 使用可猜解的加密算法传输用户账号密码，存在被中间人攻击、窃取密码的风险。 用户登录信息使用强加密传输，如密码在传输前使用安全的算法加密后传输，可采用的算法包括：不可逆 hash 算法加盐（4 位及以上随机数，由服务器端产生）；安全对称加密算法，如 AES(128、192、256 位)，且必须保证客户端密钥安全，不可被破解或读出；非对称加密算法，如 RSA(不低于 1024 位)、SM2 等。
Redis未授权访问漏洞 Redis默认情况下，会绑定在0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源ip访问等，这样将会将Redis服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问Redis以及读取Redis的数据。 攻击者在未授权访问Redis的情况下，利用Redis自身的提供的config命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的/root/.ssh文件夹的authotrized_keys文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器、添加计划任务、写入Webshell等操作。 1.禁用一些高危命令,常见如：flushdb，flushall，config，keys等。2.禁止使用root3.限启动redis服务，以低权限运行Redis服务。4.对redis访问启动密码认证。禁止外网访问Redis。5.添加IP访问限制，并更改默认6379端口。6.保证authorized_keys文件的安全。
Mongodb未授权访问漏洞 目标Mongodb服务存在未授权访问漏洞，开启MongoDB服务时不添加任何参数时,默认是没有权限验证的,登录的用户可以通过默认端口无需密码对数据库任意操作（增、删、改、查高危动作）而且可以远程访问数据库。 使用默认空口令这将导致恶意攻击者无需进行账号认证就可以登录到数据服务器。 为MongoDB添加认证：MongoDB启动时添加--auth参数、为MongoDB添加用户。